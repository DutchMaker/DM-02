.operands
0001:A
0010:B
0011:C
0100:H
0101:L
0110:ALU
0111:F
1000:MAR_H
1001:MAR_L
1010:MEM
1011:PC_H
1100:PC_L
1101:STK_H
1110:STK_L
.end

.functions
0001:TSTATE_reset
0010:CLOCK_halt
0011:STK_inc
0100:STK_dec
0101:PC_inc
0110:PC_MAR_transfer
0111:STK_MAR_transfer
1000:MAR_inc
1001:FSET_z
1010:FSET_c
1011:FCLR_z
1100:FCLR_c
.end

.alu
00000:ZERO
00001:A
00010:B
00011:-A
00100:-B
00101:A+1
00110:B+1
00111:A-1
01000:B-1
01001:A+B
01010:A+B+1
01011:A-B
01100:A-B_S
01101:B-A
01110:A-B-1
01111:B-A-1
10000:A*B_L
10001:A*B_H
10010:A/B
10011:A%B
10100:A<<B
10101:A>>B_L
10110:A>>B_A
10111:A_ROL_B
11000:A_ROR_B
11001:A_AND_B
11010:A_OR_B
11011:A_XOR_B
11100:NOT_A
11101:NOT_B
11110:A+B_BCD
11111:A-B_BCD
.end

.instructions
00:1:NOP
01:1:MOV A,B
02:1:MOV A,C
03:1:MOV A,H
04:1:MOV A,L
05:1:MOV B,A
06:1:MOV B,C
07:1:MOV B,H
08:1:MOV B,L
09:1:MOV C,A
0A:1:MOV C,B
0B:1:MOV C,H
0C:1:MOV C,L
0D:1:MOV H,A
0E:1:MOV H,B
0F:1:MOV H,C
10:1:MOV H,L
11:1:MOV L,A
12:1:MOV L,B
13:1:MOV L,C
14:1:MOV L,H
15:1:MOV BC,HL
16:1:MOV HL,BC
17:2:MOV A,value
18:2:MOV B,value
19:2:MOV C,value
1A:2:MOV H,value
1B:2:MOV L,value
1C:3:MOV BC,value
1D:3:MOV HL,value
1E:3:MOV A,address
1F:3:MOV B,address
20:3:MOV C,address
21:3:MOV BC,address
22:3:MOV HL,address
23:3:MOV address,A
24:3:MOV address,B
25:3:MOV address,C
26:3:MOV address,BC 
27:3:MOV address,HL
28:3:MOV A,(address)
29:3:MOV B,(address)
2A:3:MOV C,(address)
2B:3:MOV BC,(address)
2C:3:MOV (address),A
2D:3:MOV (address),B
2E:3:MOV (address),C
2F:3:MOV (address),BC
30:1:MOV A,(BC)
31:1:MOV H,(BC)
32:1:MOV L,(BC)
33:1:MOV A,(HL)
34:1:MOV B,(HL)
35:1:MOV C,(HL)
36:1:MOV (BC),A
37:1:MOV (BC),H
38:1:MOV (BC),L
39:1:MOV (HL),A
3A:1:MOV (HL),B
3B:1:MOV (HL),C
3C:1:MOV BC,(BC)
3D:1:MOV BC,(HL)
3E:1:MOV HL,(BC)
3F:1:MOV HL,(HL)
40:1:MOV (HL),BC
41:1:MOV (BC),HL
42:3:SP address
43:1:PUSH A
44:1:PUSH B
45:1:PUSH C
46:1:PUSH H
47:1:PUSH L
48:1:PUSH BC
49:1:PUSH HL
4A:1:PUSH F
4B:1:POP A
4C:1:POP B
4D:1:POP C
4E:1:POP H
4F:1:POP L
50:1:POP BC
51:1:POP HL
52:1:POP F
53:1:ADD A
54:1:ADD B
55:1:ADD C
56:1:ADD H
57:1:ADD L
58:2:ADD value
59:3:ADD address
5A:3:ADD (address)
5B:1:ADD (HL)
5C:1:ADC A
5D:1:ADC B
5E:1:ADC C
5F:1:ADC H
60:1:ADC L
61:2:ADC value
62:3:ADC address
63:3:ADC (address)
64:1:ADC (HL)
65:1:SUB A
66:1:SUB B
67:1:SUB C
68:1:SUB H
69:1:SUB L
6A:2:SUB value
6B:3:SUB address
6C:3:SUB (address)
6D:1:SUB (HL)
6E:1:SBC A
6F:1:SBC B
70:1:SBC C
71:1:SBC H
72:1:SBC L
73:2:SBC value
74:3:SBC address
75:3:SBC (address)
76:1:SBC (HL)
77:1:INC A
78:1:INC B
79:1:INC C
7A:1:INC H
7B:1:INC L
7C:1:DEC A
7D:1:DEC B
7E:1:DEC C
7F:1:DEC H
80:1:DEC L
81:1:AND B
82:1:AND C
83:1:AND H
84:1:AND L
85:2:AND value
86:3:AND address
87:3:AND (address)
88:1:AND (HL)
89:1:OR B
8A:1:OR C
8B:1:OR H
8C:1:OR L
8D:2:OR value
8E:3:OR address
8F:3:OR (address)
90:1:OR (HL)
91:1:XOR B
92:1:XOR C
93:1:XOR H
94:1:XOR L
95:2:XOR value
96:3:XOR address
97:3:XOR (address)
98:1:XOR (HL)
99:1:NOT A
9A:1:NOT B
9B:1:NOT C
9C:1:NOT H
9D:1:NOT L
9E:2:NOT value
9F:3:NOT address
A0:3:NOT (address)
A1:1:NOT (HL)
A2:1:SHL B
A3:1:SHL C
A4:1:SHL H
A5:1:SHL L
A6:2:SHL value
A7:1:SHR B
A8:1:SHR C
A9:1:SHR H
AA:1:SHR L
AB:2:SHR value
AC:1:ASR B
AD:1:ASR C
AE:1:ASR H
AF:1:ASR L
B0:2:ASR value
B1:1:ROL B
B2:1:ROL C
B3:1:ROL H
B4:1:ROL L
B5:2:ROL value
B6:1:ROR B
B7:1:ROR C
B8:1:ROR H
B9:1:ROR L
BA:2:ROR value
BB:1:CMP B
BC:1:CMP C
BD:1:CMP H
BE:1:CMP L
BF:2:CMP value
C0:3:CMP address
C1:3:CMP (address)
C2:1:CMP (HL)
C3:3:JMP address
C4:3:JC address
C5:3:JZ address
C6:3:JN address
C7:3:JO address
C8:3:JNC address
C9:3:JNZ address
CA:3:JP address
CB:3:JNO address
CC:3:CALL address
CD:3:CC address
CE:3:CZ address
CF:3:CN address
D0:3:CO address
D1:3:CNC address
D2:3:CNZ address
D3:3:CP address
D4:3:CNO address
D5:1:RET
D6:1:RC
D7:1:RZ
D8:1:RN
D9:1:RO
DA:1:RNC
DB:1:RNZ
DC:1:RP
DD:1:RNO
DE:1:FSET C
DF:1:FSET Z
E0:1:FCLR C
E1:1:FCLR Z
E2:1:HALT
.end

.code

  NOP
    : TSTATE_reset	
  .end

  ###########
  #   MOV   #
  ###########

  MOV r1,r2
    : [data]
      r2_out
      r1_load
    : TSTATE_reset
  .end

  MOV hl1,hl2
    : [data]
      h2_out
      h1_load
    : [data]
      l2_out
      l1_load
    : [function]
      TSTATE_reset
  .end

  MOV r1,value
    : [data]
      PC_MAR_transfer
      MEM_out
      r1_load
    : [function]
      PC_inc
      TSTATE_reset
  .end

  MOV hl1,value
    : [data]
      PC_MAR_transfer
      MEM_out
      h1_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      l1_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  MOV r1,address
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      r1_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  MOV hl1,address
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      h1_load
    : MAR_inc
    : [data]
      MEM_out
      l1_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  MOV address,r1
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      r1_out
      MEM_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  MOV address,BC
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      B_out
      MEM_load
    : MAR_inc
    : [data]
      C_out
      MEM_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  MOV address,HL
    : [data]
      PC_MAR_transfer
      MEM_out
      B_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      C_load
    : [data]
      B_out
      MAR_H_load
    : [data]
      C_out
      MAR_L_load
    : [data]
      H_out
      MEM_load
    : MAR_inc
    : [data]
      L_out
      MEM_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  MOV r1,(address)
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      r1_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  MOV hl1,(address)
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      h1_load
    : MAR_inc
    : [data]
      MEM_out
      l1_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  MOV (address),r1
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      r1_out
      MEM_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  MOV (address),hl1
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      h1_out
      MEM_load
    : MAR_inc
    : [data]
      l1_out
      MEM_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  MOV r1,(hl1)
    : [data]
      h1_out
      MAR_H_load
    : [data]
      l1_out
      MAR_L_load
    : [data]
      MEM_out
      r1_load
    : [function]   
      TSTATE_reset
  .end

  MOV (hl1),r1
    : [data]
      h1_out
      MAR_H_load
    : [data]
      l1_out
      MAR_L_load
    : [data]
      r1_out
      MEM_load
    : [function]   
      TSTATE_reset
  .end

  MOV hl1,(hl2)
    : [data]
      h2_out
      MAR_H_load
    : [data]
      l2_out
      MAR_L_load
    : [data]
      MEM_out
      h1_load
    : MAR_inc
    : [data]
      MEM_out
      l1_load
    : [function]   
      TSTATE_reset
  .end

  MOV (hl1),hl2
    : [data]
      h1_out
      MAR_H_load
    : [data]
      l1_out
      MAR_L_load
    : [data]
      h2_out
      MEM_load
    : MAR_inc
    : [data]
      l2_out
      MEM_load
    : [function]   
      TSTATE_reset
  .end

  ##########
  #   SP   #
  ##########

  SP address
    : [data]
      PC_MAR_transfer
      MEM_out
      STK_H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      STK_L_load
    : [function]
      PC_inc    
      TSTATE_reset
  .end

  ############
  #   PUSH   #
  ############

  PUSH r1
    : STK_MAR_transfer
    : [data]
      r1_out
      MEM_load
    : STK_dec    
      TSTATE_reset
  .end

  PUSH hl1
    : STK_MAR_transfer
    : [data]
      h1_out
      MEM_load
    : STK_dec
    : STK_MAR_transfer
    : [data]
      l1_out
      MEM_load
    : STK_dec
      TSTATE_reset
  .end

  PUSH F
    : STK_MAR_transfer
    : [data]
      F_out
      MEM_load
    : STK_dec
      TSTATE_reset
  .end

  ###########
  #   POP   #
  ###########

  POP r1
    : STK_inc
    : STK_MAR_transfer
    : [data]
      MEM_out
      r1_load
    : TSTATE_reset
  .end

  POP hl1
    : STK_inc
    : STK_MAR_transfer
    : [data]
      MEM_out
      l1_load
    : STK_inc
    : STK_MAR_transfer
    : [data]
      MEM_out
      h1_load
    : TSTATE_reset
  .end

  POP F
    : STK_inc
    : STK_MAR_transfer
    : [data]
      MEM_out
      F_load
    : TSTATE_reset
  .end

  ###########
  #   ADD   #
  ###########

  ADD r1
    : [data][A+B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ADD value
    : PC_MAR_transfer
    : [data][A+B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ADD address
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A+B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ADD (address)
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A+B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ADD (HL)
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A+B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ###########
  #   ADC   #
  ###########

  ADC r1 [C=0]
    : [data][A+B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ADC r1 [C=1]
    : [data][A+B+1]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ADC value [C=0]
    : PC_MAR_transfer
    : [data][A+B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ADC value [C=1]
    : PC_MAR_transfer
    : [data][A+B+1]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ADC address [C=0]
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A+B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ADC address [C=1]
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A+B+1]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ADC (address) [C=0]
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A+B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ADC (address) [C=1]
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A+B+1]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ADC (HL) [C=0]
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A+B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ADC (HL) [C=1]
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A+B+1]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ###########
  #   SUB   #
  ###########

  SUB r1
    : [data][A-B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  SUB value
    : PC_MAR_transfer
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  SUB address
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  SUB (address)
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  SUB (HL)
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ###########
  #   SBC   #
  ###########

  SBC r1 [C=0]
    : [data][A-B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  SBC r1 [C=1]
    : [data][A-B-1]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  SBC value [C=0]
    : PC_MAR_transfer
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  SBC value [C=1]
    : PC_MAR_transfer
    : [data][A-B-1]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  SBC address [C=0]
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  SBC address [C=1]
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B-1]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  SBC (address) [C=0]
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  SBC (address) [C=1]
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B-1]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  SBC (HL) [C=0]
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  SBC (HL) [C=1]
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B-1]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ###########
  #   INC   #
  ###########

  INC r1
    : [data][B+1]
      r1_out
      ALU_load
    : [data]
      ALU_out
      r1_load
    : TSTATE_reset
  .end

  ###########
  #   DEC   #
  ###########

  DEC r1
    : [data][B-1]
      r1_out
      ALU_load
    : [data]
      ALU_out
      r1_load
    : TSTATE_reset
  .end

  ###########
  #   AND   #
  ###########

  AND r1
    : [data][A_AND_B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  AND value
    : PC_MAR_transfer
    : [data][A_AND_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  AND address
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A_AND_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  AND (address)
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A_AND_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  AND (HL)
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A_AND_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ##########
  #   OR   #
  ##########

  OR r1
    : [data][A_OR_B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  OR value
    : PC_MAR_transfer
    : [data][A_OR_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  OR address
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A_OR_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  OR (address)
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A_OR_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  OR (HL)
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A_OR_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ###########
  #   XOR   #
  ###########

  XOR r1
    : [data][A_XOR_B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  XOR value
    : PC_MAR_transfer
    : [data][A_XOR_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  XOR address
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A_XOR_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  XOR (address)
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A_XOR_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  XOR (HL)
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A_XOR_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ###########
  #   NOT   #
  ###########

  NOT r1
    : [data][NOT_B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      r1_load
    : TSTATE_reset
  .end

  NOT value
    : PC_MAR_transfer
    : [data][NOT_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  NOT address
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][NOT_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  NOT (address)
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][NOT_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  NOT (HL)
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][NOT_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ###########
  #   SHL   #
  ###########

  SHL r1
    : [data][A<<B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  SHL value
    : PC_MAR_transfer
    : [data][A<<B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ###########
  #   SHR   #
  ###########

  SHR r1
    : [data][A>>B_L]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  SHR value
    : PC_MAR_transfer
    : [data][A>>B_L]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ###########
  #   ASR   #
  ###########

  ASR r1
    : [data][A>>B_A]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ASR value
    : PC_MAR_transfer
    : [data][A>>B_A]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ###########
  #   ROL   #
  ###########

  ROL r1
    : [data][A_ROL_B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ROL value
    : PC_MAR_transfer
    : [data][A_ROL_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ###########
  #   ROR   #
  ###########

  ROR r1
    : [data][A_ROR_B]
      r1_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : TSTATE_reset
  .end

  ROR value
    : PC_MAR_transfer
    : [data][A_ROR_B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
      A_load
    : PC_inc
      TSTATE_reset
  .end

  ###########
  #   CMP   #
  ###########

  CMP r1
    : [data][A-B]
      r1_out
      ALU_load
    : [data]
      ALU_out
    : TSTATE_reset
  .end

  CMP value
    : PC_MAR_transfer
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
    : PC_inc
      TSTATE_reset
  .end

  CMP address
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
    : PC_inc
      TSTATE_reset
  .end

  CMP (address)
    : [data]
      PC_MAR_transfer
      MEM_out
      H_load
    : PC_inc
    : [data]
      PC_MAR_transfer
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data]
      MEM_out
      H_load
    : MAR_inc
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
    : PC_inc
      TSTATE_reset
  .end

  CMP (HL)
    : [data]
      H_out
      MAR_H_load
    : [data]
      L_out
      MAR_L_load
    : [data][A-B]
      MEM_out
      ALU_load
    : [data]
      ALU_out
    : TSTATE_reset
  .end

  ###########
  #   JMP   #
  ###########

  JMP address
    : PC_MAR_transfer
      PC_inc
    : [data]
      MEM_out
      H_load
    : PC_MAR_transfer
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      PC_H_load
    : [data]
      L_out
      PC_L_load
      PC_inc
    : TSTATE_reset
  .end

  ########################
  #   JMP (conditional)  #
  ########################

  JC address [C=1]
    > JMP address
  .end

  JC address [C=0]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  JZ address [Z=1]
    > JMP address
  .end

  JZ address [Z=0]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  JN address [N=1]
    > JMP address
  .end

  JN address [N=0]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  JO address [O=1]
    > JMP address
  .end

  JO address [O=0]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  JNC address [C=0]
    > JMP address
  .end

  JNC address [C=1]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  JNZ address [Z=0]
    > JMP address
  .end

  JNZ address [Z=1]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  JP address [N=0]
    > JMP address
  .end

  JP address [N=1]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  JNO address [O=0]
    > JMP address
  .end

  JNO address [O=1]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  ############
  #   CALL   #
  ############
  
  CALL address
    : STK_MAR_transfer
    : [data]
      PC_H_out
      MEM_load
    : STK_dec
    : STK_MAR_transfer
    : [data]
      PC_L_out
      MEM_load
      STK_dec
    : PC_MAR_transfer
      PC_inc
    : [data]
      MEM_out
      H_load
    : PC_MAR_transfer
    : [data]
      MEM_out
      L_load
    : [data]
      H_out
      PC_H_load
    : [data]
      L_out
      PC_L_load
      PC_inc
    : TSTATE_reset
  .end

  ##########################
  #   CALL (conditional)   #
  ##########################

  CC address [C=1]
    > CALL address
  .end

  CC address [C=0]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  CZ address [Z=1]
    > CALL address
  .end

  CZ address [Z=0]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  CN address [N=1]
    > CALL address
  .end

  CN address [N=0]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  CO address [O=1]
    > CALL address
  .end

  CO address [O=0]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  CNC address [C=0]
    > CALL address
  .end

  CNC address [C=1]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  CNZ address [Z=0]
    > CALL address
  .end

  CNZ address [Z=1]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  CP address [N=0]
    > CALL address
  .end

  CP address [N=1]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  CNO address [O=0]
    > CALL address
  .end

  CNO address [O=1]
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  ###########
  #   RET   #
  ###########

  RET
    : STK_inc
    : STK_MAR_transfer
    : [data]
      MEM_out
      PC_L_load
    : STK_inc
    : STK_MAR_transfer
    : [data]
      MEM_out
      PC_H_load
    : PC_inc
    : PC_inc
      TSTATE_reset
  .end

  #########################
  #   RET (conditional)   #
  #########################

  RC [C=1]
    > RET
  .end

  RC [C=0]
    : TSTATE_reset
  .end

  RZ [Z=1]
    > RET
  .end

  RZ [Z=0]
    : TSTATE_reset
  .end

  RN [N=1]
    > RET
  .end

  RN [N=0]
    : TSTATE_reset
  .end

  RO [O=1]
    > RET
  .end

  RO [O=0]
    : TSTATE_reset
  .end

  RNC [C=0]
    > RET
  .end

  RNC [C=1]
    : TSTATE_reset
  .end

  RNZ [Z=0]
    > RET
  .end

  RNZ [Z=1]
    : TSTATE_reset
  .end

  RP [N=0]
    > RET
  .end

  RP [N=1]
    : TSTATE_reset
  .end

  RNO[O=0]
    > RET
  .end

  RNO[O=1]
    : TSTATE_reset
  .end
  
  ###########
  #   FSET  #
  ###########

  FSET C
    : FSET_c
      TSTATE_reset
  .end

  FSET Z
    : FSET_z
      TSTATE_reset
  .end

  ############
  #   FCLR   #
  ############

  FCLR C
    : FCLR_c
      TSTATE_reset
  .end

  FCLR Z
    : FCLR_z
      TSTATE_reset
  .end

  ############
  #   HALT   #
  ############

  HALT
    : CLOCK_halt
    : TSTATE_reset
  .end

.end
